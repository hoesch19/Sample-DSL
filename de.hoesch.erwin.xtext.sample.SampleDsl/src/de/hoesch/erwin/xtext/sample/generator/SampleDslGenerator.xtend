/*
 * generated by Xtext
 */
package de.hoesch.erwin.xtext.sample.generator

import com.google.inject.Inject
import de.hoesch.erwin.xtext.sample.sampleDsl.MethodElement
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.naming.IQualifiedNameProvider
import static extension org.eclipse.xtext.xtend2.lib.ResourceExtensions.*

class SampleDslGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider nameProvider
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		//TODO implement me
		for(e: resource.allContentsIterable.filter(typeof(MethodElement))){
			fsa.generateFile(e.fullyQualifiedName.toString.replace(".", "/") + ".java", e.compile)
		}
	}
	
	def compile(MethodElement me) '''
		«IF me.eContainer != null»
			package «me.eContainer.fullyQualifiedName»;	
		«ENDIF»
		
		«IF me.eContainer == null»
			package war wohl null;	
		«ENDIF»
		
		public class «me.name» {
			«me.eContainer»;
		}
	'''
	
}
